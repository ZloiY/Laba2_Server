/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.company.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-03-16")
public class WebPatternDB {

  public interface Iface {

    public boolean isConnected() throws org.apache.thrift.TException;

    public void clientConnect(boolean connect) throws org.apache.thrift.TException;

    public void addPattern(PatternModel newPattern) throws InvalidRequest, org.apache.thrift.TException;

    public void replacePattern(PatternModel oldPattern, PatternModel newPattern) throws InvalidRequest, org.apache.thrift.TException;

    public void deletePattern(PatternModel delPattern) throws InvalidRequest, org.apache.thrift.TException;

    public java.util.List<PatternModel> findPattern(PatternModel pattern) throws InvalidRequest, org.apache.thrift.TException;

    public PatternModel findPatternById(int id) throws InvalidRequest, org.apache.thrift.TException;

    public PatternModel getLastPattern() throws InvalidRequest, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void isConnected(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void clientConnect(boolean connect, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addPattern(PatternModel newPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void replacePattern(PatternModel oldPattern, PatternModel newPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deletePattern(PatternModel delPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void findPattern(PatternModel pattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PatternModel>> resultHandler) throws org.apache.thrift.TException;

    public void findPatternById(int id, org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler) throws org.apache.thrift.TException;

    public void getLastPattern(org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean isConnected() throws org.apache.thrift.TException
    {
      send_isConnected();
      return recv_isConnected();
    }

    public void send_isConnected() throws org.apache.thrift.TException
    {
      isConnected_args args = new isConnected_args();
      sendBase("isConnected", args);
    }

    public boolean recv_isConnected() throws org.apache.thrift.TException
    {
      isConnected_result result = new isConnected_result();
      receiveBase(result, "isConnected");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isConnected failed: unknown result");
    }

    public void clientConnect(boolean connect) throws org.apache.thrift.TException
    {
      send_clientConnect(connect);
      recv_clientConnect();
    }

    public void send_clientConnect(boolean connect) throws org.apache.thrift.TException
    {
      clientConnect_args args = new clientConnect_args();
      args.setConnect(connect);
      sendBase("clientConnect", args);
    }

    public void recv_clientConnect() throws org.apache.thrift.TException
    {
      clientConnect_result result = new clientConnect_result();
      receiveBase(result, "clientConnect");
      return;
    }

    public void addPattern(PatternModel newPattern) throws InvalidRequest, org.apache.thrift.TException
    {
      send_addPattern(newPattern);
      recv_addPattern();
    }

    public void send_addPattern(PatternModel newPattern) throws org.apache.thrift.TException
    {
      addPattern_args args = new addPattern_args();
      args.setNewPattern(newPattern);
      sendBase("addPattern", args);
    }

    public void recv_addPattern() throws InvalidRequest, org.apache.thrift.TException
    {
      addPattern_result result = new addPattern_result();
      receiveBase(result, "addPattern");
      if (result.oups != null) {
        throw result.oups;
      }
      return;
    }

    public void replacePattern(PatternModel oldPattern, PatternModel newPattern) throws InvalidRequest, org.apache.thrift.TException
    {
      send_replacePattern(oldPattern, newPattern);
      recv_replacePattern();
    }

    public void send_replacePattern(PatternModel oldPattern, PatternModel newPattern) throws org.apache.thrift.TException
    {
      replacePattern_args args = new replacePattern_args();
      args.setOldPattern(oldPattern);
      args.setNewPattern(newPattern);
      sendBase("replacePattern", args);
    }

    public void recv_replacePattern() throws InvalidRequest, org.apache.thrift.TException
    {
      replacePattern_result result = new replacePattern_result();
      receiveBase(result, "replacePattern");
      if (result.oups != null) {
        throw result.oups;
      }
      return;
    }

    public void deletePattern(PatternModel delPattern) throws InvalidRequest, org.apache.thrift.TException
    {
      send_deletePattern(delPattern);
      recv_deletePattern();
    }

    public void send_deletePattern(PatternModel delPattern) throws org.apache.thrift.TException
    {
      deletePattern_args args = new deletePattern_args();
      args.setDelPattern(delPattern);
      sendBase("deletePattern", args);
    }

    public void recv_deletePattern() throws InvalidRequest, org.apache.thrift.TException
    {
      deletePattern_result result = new deletePattern_result();
      receiveBase(result, "deletePattern");
      if (result.oups != null) {
        throw result.oups;
      }
      return;
    }

    public java.util.List<PatternModel> findPattern(PatternModel pattern) throws InvalidRequest, org.apache.thrift.TException
    {
      send_findPattern(pattern);
      return recv_findPattern();
    }

    public void send_findPattern(PatternModel pattern) throws org.apache.thrift.TException
    {
      findPattern_args args = new findPattern_args();
      args.setPattern(pattern);
      sendBase("findPattern", args);
    }

    public java.util.List<PatternModel> recv_findPattern() throws InvalidRequest, org.apache.thrift.TException
    {
      findPattern_result result = new findPattern_result();
      receiveBase(result, "findPattern");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oups != null) {
        throw result.oups;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPattern failed: unknown result");
    }

    public PatternModel findPatternById(int id) throws InvalidRequest, org.apache.thrift.TException
    {
      send_findPatternById(id);
      return recv_findPatternById();
    }

    public void send_findPatternById(int id) throws org.apache.thrift.TException
    {
      findPatternById_args args = new findPatternById_args();
      args.setId(id);
      sendBase("findPatternById", args);
    }

    public PatternModel recv_findPatternById() throws InvalidRequest, org.apache.thrift.TException
    {
      findPatternById_result result = new findPatternById_result();
      receiveBase(result, "findPatternById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oups != null) {
        throw result.oups;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPatternById failed: unknown result");
    }

    public PatternModel getLastPattern() throws InvalidRequest, org.apache.thrift.TException
    {
      send_getLastPattern();
      return recv_getLastPattern();
    }

    public void send_getLastPattern() throws org.apache.thrift.TException
    {
      getLastPattern_args args = new getLastPattern_args();
      sendBase("getLastPattern", args);
    }

    public PatternModel recv_getLastPattern() throws InvalidRequest, org.apache.thrift.TException
    {
      getLastPattern_result result = new getLastPattern_result();
      receiveBase(result, "getLastPattern");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oups != null) {
        throw result.oups;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastPattern failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void isConnected(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isConnected_call method_call = new isConnected_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isConnected_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public isConnected_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isConnected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isConnected_args args = new isConnected_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isConnected();
      }
    }

    public void clientConnect(boolean connect, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clientConnect_call method_call = new clientConnect_call(connect, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clientConnect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private boolean connect;
      public clientConnect_call(boolean connect, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clientConnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clientConnect_args args = new clientConnect_args();
        args.setConnect(connect);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addPattern(PatternModel newPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPattern_call method_call = new addPattern_call(newPattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPattern_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private PatternModel newPattern;
      public addPattern_call(PatternModel newPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newPattern = newPattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPattern_args args = new addPattern_args();
        args.setNewPattern(newPattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws InvalidRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void replacePattern(PatternModel oldPattern, PatternModel newPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replacePattern_call method_call = new replacePattern_call(oldPattern, newPattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replacePattern_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private PatternModel oldPattern;
      private PatternModel newPattern;
      public replacePattern_call(PatternModel oldPattern, PatternModel newPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldPattern = oldPattern;
        this.newPattern = newPattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replacePattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replacePattern_args args = new replacePattern_args();
        args.setOldPattern(oldPattern);
        args.setNewPattern(newPattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws InvalidRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deletePattern(PatternModel delPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePattern_call method_call = new deletePattern_call(delPattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePattern_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private PatternModel delPattern;
      public deletePattern_call(PatternModel delPattern, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.delPattern = delPattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePattern_args args = new deletePattern_args();
        args.setDelPattern(delPattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws InvalidRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void findPattern(PatternModel pattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PatternModel>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPattern_call method_call = new findPattern_call(pattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPattern_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<PatternModel>> {
      private PatternModel pattern;
      public findPattern_call(PatternModel pattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PatternModel>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pattern = pattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPattern_args args = new findPattern_args();
        args.setPattern(pattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<PatternModel> getResult() throws InvalidRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPattern();
      }
    }

    public void findPatternById(int id, org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPatternById_call method_call = new findPatternById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPatternById_call extends org.apache.thrift.async.TAsyncMethodCall<PatternModel> {
      private int id;
      public findPatternById_call(int id, org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPatternById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPatternById_args args = new findPatternById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatternModel getResult() throws InvalidRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPatternById();
      }
    }

    public void getLastPattern(org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastPattern_call method_call = new getLastPattern_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastPattern_call extends org.apache.thrift.async.TAsyncMethodCall<PatternModel> {
      public getLastPattern_call(org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastPattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastPattern_args args = new getLastPattern_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PatternModel getResult() throws InvalidRequest, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastPattern();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("isConnected", new isConnected());
      processMap.put("clientConnect", new clientConnect());
      processMap.put("addPattern", new addPattern());
      processMap.put("replacePattern", new replacePattern());
      processMap.put("deletePattern", new deletePattern());
      processMap.put("findPattern", new findPattern());
      processMap.put("findPatternById", new findPatternById());
      processMap.put("getLastPattern", new getLastPattern());
      return processMap;
    }

    public static class isConnected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isConnected_args> {
      public isConnected() {
        super("isConnected");
      }

      public isConnected_args getEmptyArgsInstance() {
        return new isConnected_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isConnected_result getResult(I iface, isConnected_args args) throws org.apache.thrift.TException {
        isConnected_result result = new isConnected_result();
        result.success = iface.isConnected();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clientConnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clientConnect_args> {
      public clientConnect() {
        super("clientConnect");
      }

      public clientConnect_args getEmptyArgsInstance() {
        return new clientConnect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clientConnect_result getResult(I iface, clientConnect_args args) throws org.apache.thrift.TException {
        clientConnect_result result = new clientConnect_result();
        iface.clientConnect(args.connect);
        return result;
      }
    }

    public static class addPattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPattern_args> {
      public addPattern() {
        super("addPattern");
      }

      public addPattern_args getEmptyArgsInstance() {
        return new addPattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPattern_result getResult(I iface, addPattern_args args) throws org.apache.thrift.TException {
        addPattern_result result = new addPattern_result();
        try {
          iface.addPattern(args.newPattern);
        } catch (InvalidRequest oups) {
          result.oups = oups;
        }
        return result;
      }
    }

    public static class replacePattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replacePattern_args> {
      public replacePattern() {
        super("replacePattern");
      }

      public replacePattern_args getEmptyArgsInstance() {
        return new replacePattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replacePattern_result getResult(I iface, replacePattern_args args) throws org.apache.thrift.TException {
        replacePattern_result result = new replacePattern_result();
        try {
          iface.replacePattern(args.oldPattern, args.newPattern);
        } catch (InvalidRequest oups) {
          result.oups = oups;
        }
        return result;
      }
    }

    public static class deletePattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePattern_args> {
      public deletePattern() {
        super("deletePattern");
      }

      public deletePattern_args getEmptyArgsInstance() {
        return new deletePattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletePattern_result getResult(I iface, deletePattern_args args) throws org.apache.thrift.TException {
        deletePattern_result result = new deletePattern_result();
        try {
          iface.deletePattern(args.delPattern);
        } catch (InvalidRequest oups) {
          result.oups = oups;
        }
        return result;
      }
    }

    public static class findPattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPattern_args> {
      public findPattern() {
        super("findPattern");
      }

      public findPattern_args getEmptyArgsInstance() {
        return new findPattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPattern_result getResult(I iface, findPattern_args args) throws org.apache.thrift.TException {
        findPattern_result result = new findPattern_result();
        try {
          result.success = iface.findPattern(args.pattern);
        } catch (InvalidRequest oups) {
          result.oups = oups;
        }
        return result;
      }
    }

    public static class findPatternById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPatternById_args> {
      public findPatternById() {
        super("findPatternById");
      }

      public findPatternById_args getEmptyArgsInstance() {
        return new findPatternById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPatternById_result getResult(I iface, findPatternById_args args) throws org.apache.thrift.TException {
        findPatternById_result result = new findPatternById_result();
        try {
          result.success = iface.findPatternById(args.id);
        } catch (InvalidRequest oups) {
          result.oups = oups;
        }
        return result;
      }
    }

    public static class getLastPattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastPattern_args> {
      public getLastPattern() {
        super("getLastPattern");
      }

      public getLastPattern_args getEmptyArgsInstance() {
        return new getLastPattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastPattern_result getResult(I iface, getLastPattern_args args) throws org.apache.thrift.TException {
        getLastPattern_result result = new getLastPattern_result();
        try {
          result.success = iface.getLastPattern();
        } catch (InvalidRequest oups) {
          result.oups = oups;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("isConnected", new isConnected());
      processMap.put("clientConnect", new clientConnect());
      processMap.put("addPattern", new addPattern());
      processMap.put("replacePattern", new replacePattern());
      processMap.put("deletePattern", new deletePattern());
      processMap.put("findPattern", new findPattern());
      processMap.put("findPatternById", new findPatternById());
      processMap.put("getLastPattern", new getLastPattern());
      return processMap;
    }

    public static class isConnected<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isConnected_args, java.lang.Boolean> {
      public isConnected() {
        super("isConnected");
      }

      public isConnected_args getEmptyArgsInstance() {
        return new isConnected_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            isConnected_result result = new isConnected_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isConnected_result result = new isConnected_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isConnected_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.isConnected(resultHandler);
      }
    }

    public static class clientConnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clientConnect_args, Void> {
      public clientConnect() {
        super("clientConnect");
      }

      public clientConnect_args getEmptyArgsInstance() {
        return new clientConnect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            clientConnect_result result = new clientConnect_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            clientConnect_result result = new clientConnect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clientConnect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.clientConnect(args.connect,resultHandler);
      }
    }

    public static class addPattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPattern_args, Void> {
      public addPattern() {
        super("addPattern");
      }

      public addPattern_args getEmptyArgsInstance() {
        return new addPattern_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addPattern_result result = new addPattern_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addPattern_result result = new addPattern_result();
            if (e instanceof InvalidRequest) {
              result.oups = (InvalidRequest) e;
              result.setOupsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPattern_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addPattern(args.newPattern,resultHandler);
      }
    }

    public static class replacePattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replacePattern_args, Void> {
      public replacePattern() {
        super("replacePattern");
      }

      public replacePattern_args getEmptyArgsInstance() {
        return new replacePattern_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            replacePattern_result result = new replacePattern_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            replacePattern_result result = new replacePattern_result();
            if (e instanceof InvalidRequest) {
              result.oups = (InvalidRequest) e;
              result.setOupsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replacePattern_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.replacePattern(args.oldPattern, args.newPattern,resultHandler);
      }
    }

    public static class deletePattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePattern_args, Void> {
      public deletePattern() {
        super("deletePattern");
      }

      public deletePattern_args getEmptyArgsInstance() {
        return new deletePattern_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deletePattern_result result = new deletePattern_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deletePattern_result result = new deletePattern_result();
            if (e instanceof InvalidRequest) {
              result.oups = (InvalidRequest) e;
              result.setOupsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletePattern_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deletePattern(args.delPattern,resultHandler);
      }
    }

    public static class findPattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPattern_args, java.util.List<PatternModel>> {
      public findPattern() {
        super("findPattern");
      }

      public findPattern_args getEmptyArgsInstance() {
        return new findPattern_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<PatternModel>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<PatternModel>>() { 
          public void onComplete(java.util.List<PatternModel> o) {
            findPattern_result result = new findPattern_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findPattern_result result = new findPattern_result();
            if (e instanceof InvalidRequest) {
              result.oups = (InvalidRequest) e;
              result.setOupsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPattern_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<PatternModel>> resultHandler) throws org.apache.thrift.TException {
        iface.findPattern(args.pattern,resultHandler);
      }
    }

    public static class findPatternById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPatternById_args, PatternModel> {
      public findPatternById() {
        super("findPatternById");
      }

      public findPatternById_args getEmptyArgsInstance() {
        return new findPatternById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PatternModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PatternModel>() { 
          public void onComplete(PatternModel o) {
            findPatternById_result result = new findPatternById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findPatternById_result result = new findPatternById_result();
            if (e instanceof InvalidRequest) {
              result.oups = (InvalidRequest) e;
              result.setOupsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPatternById_args args, org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler) throws org.apache.thrift.TException {
        iface.findPatternById(args.id,resultHandler);
      }
    }

    public static class getLastPattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastPattern_args, PatternModel> {
      public getLastPattern() {
        super("getLastPattern");
      }

      public getLastPattern_args getEmptyArgsInstance() {
        return new getLastPattern_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PatternModel> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PatternModel>() { 
          public void onComplete(PatternModel o) {
            getLastPattern_result result = new getLastPattern_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getLastPattern_result result = new getLastPattern_result();
            if (e instanceof InvalidRequest) {
              result.oups = (InvalidRequest) e;
              result.setOupsIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastPattern_args args, org.apache.thrift.async.AsyncMethodCallback<PatternModel> resultHandler) throws org.apache.thrift.TException {
        iface.getLastPattern(resultHandler);
      }
    }

  }

  public static class isConnected_args implements org.apache.thrift.TBase<isConnected_args, isConnected_args._Fields>, java.io.Serializable, Cloneable, Comparable<isConnected_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isConnected_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isConnected_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isConnected_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isConnected_args.class, metaDataMap);
    }

    public isConnected_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isConnected_args(isConnected_args other) {
    }

    public isConnected_args deepCopy() {
      return new isConnected_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isConnected_args)
        return this.equals((isConnected_args)that);
      return false;
    }

    public boolean equals(isConnected_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(isConnected_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isConnected_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isConnected_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isConnected_argsStandardScheme getScheme() {
        return new isConnected_argsStandardScheme();
      }
    }

    private static class isConnected_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isConnected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isConnected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isConnected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isConnected_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isConnected_argsTupleScheme getScheme() {
        return new isConnected_argsTupleScheme();
      }
    }

    private static class isConnected_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isConnected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isConnected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isConnected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isConnected_result implements org.apache.thrift.TBase<isConnected_result, isConnected_result._Fields>, java.io.Serializable, Cloneable, Comparable<isConnected_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isConnected_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isConnected_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isConnected_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isConnected_result.class, metaDataMap);
    }

    public isConnected_result() {
    }

    public isConnected_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isConnected_result(isConnected_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isConnected_result deepCopy() {
      return new isConnected_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isConnected_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isConnected_result)
        return this.equals((isConnected_result)that);
      return false;
    }

    public boolean equals(isConnected_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(isConnected_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isConnected_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isConnected_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isConnected_resultStandardScheme getScheme() {
        return new isConnected_resultStandardScheme();
      }
    }

    private static class isConnected_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isConnected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isConnected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isConnected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isConnected_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isConnected_resultTupleScheme getScheme() {
        return new isConnected_resultTupleScheme();
      }
    }

    private static class isConnected_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isConnected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isConnected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isConnected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class clientConnect_args implements org.apache.thrift.TBase<clientConnect_args, clientConnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<clientConnect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientConnect_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.BOOL, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clientConnect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clientConnect_argsTupleSchemeFactory();

    public boolean connect; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONNECT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientConnect_args.class, metaDataMap);
    }

    public clientConnect_args() {
    }

    public clientConnect_args(
      boolean connect)
    {
      this();
      this.connect = connect;
      setConnectIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientConnect_args(clientConnect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.connect = other.connect;
    }

    public clientConnect_args deepCopy() {
      return new clientConnect_args(this);
    }

    @Override
    public void clear() {
      setConnectIsSet(false);
      this.connect = false;
    }

    public boolean isConnect() {
      return this.connect;
    }

    public clientConnect_args setConnect(boolean connect) {
      this.connect = connect;
      setConnectIsSet(true);
      return this;
    }

    public void unsetConnect() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONNECT_ISSET_ID);
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONNECT_ISSET_ID);
    }

    public void setConnectIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONNECT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return isConnect();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof clientConnect_args)
        return this.equals((clientConnect_args)that);
      return false;
    }

    public boolean equals(clientConnect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true;
      boolean that_present_connect = true;
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (this.connect != that.connect)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((connect) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(clientConnect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("clientConnect_args(");
      boolean first = true;

      sb.append("connect:");
      sb.append(this.connect);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientConnect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clientConnect_argsStandardScheme getScheme() {
        return new clientConnect_argsStandardScheme();
      }
    }

    private static class clientConnect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<clientConnect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientConnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.connect = iprot.readBool();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientConnect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CONNECT_FIELD_DESC);
        oprot.writeBool(struct.connect);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientConnect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clientConnect_argsTupleScheme getScheme() {
        return new clientConnect_argsTupleScheme();
      }
    }

    private static class clientConnect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<clientConnect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientConnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConnect()) {
          oprot.writeBool(struct.connect);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientConnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.connect = iprot.readBool();
          struct.setConnectIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class clientConnect_result implements org.apache.thrift.TBase<clientConnect_result, clientConnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<clientConnect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clientConnect_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clientConnect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clientConnect_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clientConnect_result.class, metaDataMap);
    }

    public clientConnect_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clientConnect_result(clientConnect_result other) {
    }

    public clientConnect_result deepCopy() {
      return new clientConnect_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof clientConnect_result)
        return this.equals((clientConnect_result)that);
      return false;
    }

    public boolean equals(clientConnect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(clientConnect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("clientConnect_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clientConnect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clientConnect_resultStandardScheme getScheme() {
        return new clientConnect_resultStandardScheme();
      }
    }

    private static class clientConnect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<clientConnect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clientConnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clientConnect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clientConnect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clientConnect_resultTupleScheme getScheme() {
        return new clientConnect_resultTupleScheme();
      }
    }

    private static class clientConnect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<clientConnect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clientConnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clientConnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addPattern_args implements org.apache.thrift.TBase<addPattern_args, addPattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPattern_args");

    private static final org.apache.thrift.protocol.TField NEW_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("newPattern", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPattern_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPattern_argsTupleSchemeFactory();

    public PatternModel newPattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_PATTERN((short)1, "newPattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_PATTERN
            return NEW_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("newPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPattern_args.class, metaDataMap);
    }

    public addPattern_args() {
    }

    public addPattern_args(
      PatternModel newPattern)
    {
      this();
      this.newPattern = newPattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPattern_args(addPattern_args other) {
      if (other.isSetNewPattern()) {
        this.newPattern = new PatternModel(other.newPattern);
      }
    }

    public addPattern_args deepCopy() {
      return new addPattern_args(this);
    }

    @Override
    public void clear() {
      this.newPattern = null;
    }

    public PatternModel getNewPattern() {
      return this.newPattern;
    }

    public addPattern_args setNewPattern(PatternModel newPattern) {
      this.newPattern = newPattern;
      return this;
    }

    public void unsetNewPattern() {
      this.newPattern = null;
    }

    /** Returns true if field newPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPattern() {
      return this.newPattern != null;
    }

    public void setNewPatternIsSet(boolean value) {
      if (!value) {
        this.newPattern = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NEW_PATTERN:
        if (value == null) {
          unsetNewPattern();
        } else {
          setNewPattern((PatternModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_PATTERN:
        return getNewPattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NEW_PATTERN:
        return isSetNewPattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addPattern_args)
        return this.equals((addPattern_args)that);
      return false;
    }

    public boolean equals(addPattern_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_newPattern = true && this.isSetNewPattern();
      boolean that_present_newPattern = true && that.isSetNewPattern();
      if (this_present_newPattern || that_present_newPattern) {
        if (!(this_present_newPattern && that_present_newPattern))
          return false;
        if (!this.newPattern.equals(that.newPattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNewPattern()) ? 131071 : 524287);
      if (isSetNewPattern())
        hashCode = hashCode * 8191 + newPattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addPattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNewPattern()).compareTo(other.isSetNewPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPattern, other.newPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addPattern_args(");
      boolean first = true;

      sb.append("newPattern:");
      if (this.newPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.newPattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newPattern != null) {
        newPattern.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPattern_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPattern_argsStandardScheme getScheme() {
        return new addPattern_argsStandardScheme();
      }
    }

    private static class addPattern_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newPattern = new PatternModel();
                struct.newPattern.read(iprot);
                struct.setNewPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newPattern != null) {
          oprot.writeFieldBegin(NEW_PATTERN_FIELD_DESC);
          struct.newPattern.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPattern_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPattern_argsTupleScheme getScheme() {
        return new addPattern_argsTupleScheme();
      }
    }

    private static class addPattern_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNewPattern()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewPattern()) {
          struct.newPattern.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newPattern = new PatternModel();
          struct.newPattern.read(iprot);
          struct.setNewPatternIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addPattern_result implements org.apache.thrift.TBase<addPattern_result, addPattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPattern_result");

    private static final org.apache.thrift.protocol.TField OUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("oups", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addPattern_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addPattern_resultTupleSchemeFactory();

    public InvalidRequest oups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUPS((short)1, "oups");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUPS
            return OUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUPS, new org.apache.thrift.meta_data.FieldMetaData("oups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPattern_result.class, metaDataMap);
    }

    public addPattern_result() {
    }

    public addPattern_result(
      InvalidRequest oups)
    {
      this();
      this.oups = oups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPattern_result(addPattern_result other) {
      if (other.isSetOups()) {
        this.oups = new InvalidRequest(other.oups);
      }
    }

    public addPattern_result deepCopy() {
      return new addPattern_result(this);
    }

    @Override
    public void clear() {
      this.oups = null;
    }

    public InvalidRequest getOups() {
      return this.oups;
    }

    public addPattern_result setOups(InvalidRequest oups) {
      this.oups = oups;
      return this;
    }

    public void unsetOups() {
      this.oups = null;
    }

    /** Returns true if field oups is set (has been assigned a value) and false otherwise */
    public boolean isSetOups() {
      return this.oups != null;
    }

    public void setOupsIsSet(boolean value) {
      if (!value) {
        this.oups = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OUPS:
        if (value == null) {
          unsetOups();
        } else {
          setOups((InvalidRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OUPS:
        return getOups();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OUPS:
        return isSetOups();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addPattern_result)
        return this.equals((addPattern_result)that);
      return false;
    }

    public boolean equals(addPattern_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oups = true && this.isSetOups();
      boolean that_present_oups = true && that.isSetOups();
      if (this_present_oups || that_present_oups) {
        if (!(this_present_oups && that_present_oups))
          return false;
        if (!this.oups.equals(that.oups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOups()) ? 131071 : 524287);
      if (isSetOups())
        hashCode = hashCode * 8191 + oups.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addPattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOups()).compareTo(other.isSetOups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oups, other.oups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addPattern_result(");
      boolean first = true;

      sb.append("oups:");
      if (this.oups == null) {
        sb.append("null");
      } else {
        sb.append(this.oups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPattern_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPattern_resultStandardScheme getScheme() {
        return new addPattern_resultStandardScheme();
      }
    }

    private static class addPattern_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addPattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oups = new InvalidRequest();
                struct.oups.read(iprot);
                struct.setOupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oups != null) {
          oprot.writeFieldBegin(OUPS_FIELD_DESC);
          struct.oups.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPattern_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addPattern_resultTupleScheme getScheme() {
        return new addPattern_resultTupleScheme();
      }
    }

    private static class addPattern_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addPattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOups()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOups()) {
          struct.oups.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oups = new InvalidRequest();
          struct.oups.read(iprot);
          struct.setOupsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class replacePattern_args implements org.apache.thrift.TBase<replacePattern_args, replacePattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<replacePattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replacePattern_args");

    private static final org.apache.thrift.protocol.TField OLD_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPattern", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("newPattern", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new replacePattern_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new replacePattern_argsTupleSchemeFactory();

    public PatternModel oldPattern; // required
    public PatternModel newPattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_PATTERN((short)1, "oldPattern"),
      NEW_PATTERN((short)2, "newPattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_PATTERN
            return OLD_PATTERN;
          case 2: // NEW_PATTERN
            return NEW_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("oldPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      tmpMap.put(_Fields.NEW_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("newPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replacePattern_args.class, metaDataMap);
    }

    public replacePattern_args() {
    }

    public replacePattern_args(
      PatternModel oldPattern,
      PatternModel newPattern)
    {
      this();
      this.oldPattern = oldPattern;
      this.newPattern = newPattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replacePattern_args(replacePattern_args other) {
      if (other.isSetOldPattern()) {
        this.oldPattern = new PatternModel(other.oldPattern);
      }
      if (other.isSetNewPattern()) {
        this.newPattern = new PatternModel(other.newPattern);
      }
    }

    public replacePattern_args deepCopy() {
      return new replacePattern_args(this);
    }

    @Override
    public void clear() {
      this.oldPattern = null;
      this.newPattern = null;
    }

    public PatternModel getOldPattern() {
      return this.oldPattern;
    }

    public replacePattern_args setOldPattern(PatternModel oldPattern) {
      this.oldPattern = oldPattern;
      return this;
    }

    public void unsetOldPattern() {
      this.oldPattern = null;
    }

    /** Returns true if field oldPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPattern() {
      return this.oldPattern != null;
    }

    public void setOldPatternIsSet(boolean value) {
      if (!value) {
        this.oldPattern = null;
      }
    }

    public PatternModel getNewPattern() {
      return this.newPattern;
    }

    public replacePattern_args setNewPattern(PatternModel newPattern) {
      this.newPattern = newPattern;
      return this;
    }

    public void unsetNewPattern() {
      this.newPattern = null;
    }

    /** Returns true if field newPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPattern() {
      return this.newPattern != null;
    }

    public void setNewPatternIsSet(boolean value) {
      if (!value) {
        this.newPattern = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OLD_PATTERN:
        if (value == null) {
          unsetOldPattern();
        } else {
          setOldPattern((PatternModel)value);
        }
        break;

      case NEW_PATTERN:
        if (value == null) {
          unsetNewPattern();
        } else {
          setNewPattern((PatternModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_PATTERN:
        return getOldPattern();

      case NEW_PATTERN:
        return getNewPattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OLD_PATTERN:
        return isSetOldPattern();
      case NEW_PATTERN:
        return isSetNewPattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof replacePattern_args)
        return this.equals((replacePattern_args)that);
      return false;
    }

    public boolean equals(replacePattern_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oldPattern = true && this.isSetOldPattern();
      boolean that_present_oldPattern = true && that.isSetOldPattern();
      if (this_present_oldPattern || that_present_oldPattern) {
        if (!(this_present_oldPattern && that_present_oldPattern))
          return false;
        if (!this.oldPattern.equals(that.oldPattern))
          return false;
      }

      boolean this_present_newPattern = true && this.isSetNewPattern();
      boolean that_present_newPattern = true && that.isSetNewPattern();
      if (this_present_newPattern || that_present_newPattern) {
        if (!(this_present_newPattern && that_present_newPattern))
          return false;
        if (!this.newPattern.equals(that.newPattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOldPattern()) ? 131071 : 524287);
      if (isSetOldPattern())
        hashCode = hashCode * 8191 + oldPattern.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewPattern()) ? 131071 : 524287);
      if (isSetNewPattern())
        hashCode = hashCode * 8191 + newPattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(replacePattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOldPattern()).compareTo(other.isSetOldPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPattern, other.oldPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewPattern()).compareTo(other.isSetNewPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPattern, other.newPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("replacePattern_args(");
      boolean first = true;

      sb.append("oldPattern:");
      if (this.oldPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.oldPattern);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPattern:");
      if (this.newPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.newPattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oldPattern != null) {
        oldPattern.validate();
      }
      if (newPattern != null) {
        newPattern.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replacePattern_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public replacePattern_argsStandardScheme getScheme() {
        return new replacePattern_argsStandardScheme();
      }
    }

    private static class replacePattern_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<replacePattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replacePattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oldPattern = new PatternModel();
                struct.oldPattern.read(iprot);
                struct.setOldPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newPattern = new PatternModel();
                struct.newPattern.read(iprot);
                struct.setNewPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replacePattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oldPattern != null) {
          oprot.writeFieldBegin(OLD_PATTERN_FIELD_DESC);
          struct.oldPattern.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newPattern != null) {
          oprot.writeFieldBegin(NEW_PATTERN_FIELD_DESC);
          struct.newPattern.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replacePattern_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public replacePattern_argsTupleScheme getScheme() {
        return new replacePattern_argsTupleScheme();
      }
    }

    private static class replacePattern_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<replacePattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replacePattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOldPattern()) {
          optionals.set(0);
        }
        if (struct.isSetNewPattern()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOldPattern()) {
          struct.oldPattern.write(oprot);
        }
        if (struct.isSetNewPattern()) {
          struct.newPattern.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replacePattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.oldPattern = new PatternModel();
          struct.oldPattern.read(iprot);
          struct.setOldPatternIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newPattern = new PatternModel();
          struct.newPattern.read(iprot);
          struct.setNewPatternIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class replacePattern_result implements org.apache.thrift.TBase<replacePattern_result, replacePattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<replacePattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replacePattern_result");

    private static final org.apache.thrift.protocol.TField OUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("oups", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new replacePattern_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new replacePattern_resultTupleSchemeFactory();

    public InvalidRequest oups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUPS((short)1, "oups");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUPS
            return OUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUPS, new org.apache.thrift.meta_data.FieldMetaData("oups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replacePattern_result.class, metaDataMap);
    }

    public replacePattern_result() {
    }

    public replacePattern_result(
      InvalidRequest oups)
    {
      this();
      this.oups = oups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replacePattern_result(replacePattern_result other) {
      if (other.isSetOups()) {
        this.oups = new InvalidRequest(other.oups);
      }
    }

    public replacePattern_result deepCopy() {
      return new replacePattern_result(this);
    }

    @Override
    public void clear() {
      this.oups = null;
    }

    public InvalidRequest getOups() {
      return this.oups;
    }

    public replacePattern_result setOups(InvalidRequest oups) {
      this.oups = oups;
      return this;
    }

    public void unsetOups() {
      this.oups = null;
    }

    /** Returns true if field oups is set (has been assigned a value) and false otherwise */
    public boolean isSetOups() {
      return this.oups != null;
    }

    public void setOupsIsSet(boolean value) {
      if (!value) {
        this.oups = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OUPS:
        if (value == null) {
          unsetOups();
        } else {
          setOups((InvalidRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OUPS:
        return getOups();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OUPS:
        return isSetOups();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof replacePattern_result)
        return this.equals((replacePattern_result)that);
      return false;
    }

    public boolean equals(replacePattern_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oups = true && this.isSetOups();
      boolean that_present_oups = true && that.isSetOups();
      if (this_present_oups || that_present_oups) {
        if (!(this_present_oups && that_present_oups))
          return false;
        if (!this.oups.equals(that.oups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOups()) ? 131071 : 524287);
      if (isSetOups())
        hashCode = hashCode * 8191 + oups.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(replacePattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOups()).compareTo(other.isSetOups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oups, other.oups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("replacePattern_result(");
      boolean first = true;

      sb.append("oups:");
      if (this.oups == null) {
        sb.append("null");
      } else {
        sb.append(this.oups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replacePattern_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public replacePattern_resultStandardScheme getScheme() {
        return new replacePattern_resultStandardScheme();
      }
    }

    private static class replacePattern_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<replacePattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replacePattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oups = new InvalidRequest();
                struct.oups.read(iprot);
                struct.setOupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replacePattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oups != null) {
          oprot.writeFieldBegin(OUPS_FIELD_DESC);
          struct.oups.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replacePattern_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public replacePattern_resultTupleScheme getScheme() {
        return new replacePattern_resultTupleScheme();
      }
    }

    private static class replacePattern_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<replacePattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replacePattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOups()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOups()) {
          struct.oups.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replacePattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oups = new InvalidRequest();
          struct.oups.read(iprot);
          struct.setOupsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletePattern_args implements org.apache.thrift.TBase<deletePattern_args, deletePattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePattern_args");

    private static final org.apache.thrift.protocol.TField DEL_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("delPattern", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletePattern_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletePattern_argsTupleSchemeFactory();

    public PatternModel delPattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEL_PATTERN((short)1, "delPattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEL_PATTERN
            return DEL_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEL_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("delPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePattern_args.class, metaDataMap);
    }

    public deletePattern_args() {
    }

    public deletePattern_args(
      PatternModel delPattern)
    {
      this();
      this.delPattern = delPattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePattern_args(deletePattern_args other) {
      if (other.isSetDelPattern()) {
        this.delPattern = new PatternModel(other.delPattern);
      }
    }

    public deletePattern_args deepCopy() {
      return new deletePattern_args(this);
    }

    @Override
    public void clear() {
      this.delPattern = null;
    }

    public PatternModel getDelPattern() {
      return this.delPattern;
    }

    public deletePattern_args setDelPattern(PatternModel delPattern) {
      this.delPattern = delPattern;
      return this;
    }

    public void unsetDelPattern() {
      this.delPattern = null;
    }

    /** Returns true if field delPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetDelPattern() {
      return this.delPattern != null;
    }

    public void setDelPatternIsSet(boolean value) {
      if (!value) {
        this.delPattern = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEL_PATTERN:
        if (value == null) {
          unsetDelPattern();
        } else {
          setDelPattern((PatternModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEL_PATTERN:
        return getDelPattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEL_PATTERN:
        return isSetDelPattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePattern_args)
        return this.equals((deletePattern_args)that);
      return false;
    }

    public boolean equals(deletePattern_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_delPattern = true && this.isSetDelPattern();
      boolean that_present_delPattern = true && that.isSetDelPattern();
      if (this_present_delPattern || that_present_delPattern) {
        if (!(this_present_delPattern && that_present_delPattern))
          return false;
        if (!this.delPattern.equals(that.delPattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDelPattern()) ? 131071 : 524287);
      if (isSetDelPattern())
        hashCode = hashCode * 8191 + delPattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deletePattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDelPattern()).compareTo(other.isSetDelPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delPattern, other.delPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deletePattern_args(");
      boolean first = true;

      sb.append("delPattern:");
      if (this.delPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.delPattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (delPattern != null) {
        delPattern.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePattern_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePattern_argsStandardScheme getScheme() {
        return new deletePattern_argsStandardScheme();
      }
    }

    private static class deletePattern_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletePattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEL_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.delPattern = new PatternModel();
                struct.delPattern.read(iprot);
                struct.setDelPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.delPattern != null) {
          oprot.writeFieldBegin(DEL_PATTERN_FIELD_DESC);
          struct.delPattern.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePattern_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePattern_argsTupleScheme getScheme() {
        return new deletePattern_argsTupleScheme();
      }
    }

    private static class deletePattern_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletePattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDelPattern()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDelPattern()) {
          struct.delPattern.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.delPattern = new PatternModel();
          struct.delPattern.read(iprot);
          struct.setDelPatternIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deletePattern_result implements org.apache.thrift.TBase<deletePattern_result, deletePattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePattern_result");

    private static final org.apache.thrift.protocol.TField OUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("oups", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deletePattern_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deletePattern_resultTupleSchemeFactory();

    public InvalidRequest oups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUPS((short)1, "oups");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUPS
            return OUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUPS, new org.apache.thrift.meta_data.FieldMetaData("oups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePattern_result.class, metaDataMap);
    }

    public deletePattern_result() {
    }

    public deletePattern_result(
      InvalidRequest oups)
    {
      this();
      this.oups = oups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePattern_result(deletePattern_result other) {
      if (other.isSetOups()) {
        this.oups = new InvalidRequest(other.oups);
      }
    }

    public deletePattern_result deepCopy() {
      return new deletePattern_result(this);
    }

    @Override
    public void clear() {
      this.oups = null;
    }

    public InvalidRequest getOups() {
      return this.oups;
    }

    public deletePattern_result setOups(InvalidRequest oups) {
      this.oups = oups;
      return this;
    }

    public void unsetOups() {
      this.oups = null;
    }

    /** Returns true if field oups is set (has been assigned a value) and false otherwise */
    public boolean isSetOups() {
      return this.oups != null;
    }

    public void setOupsIsSet(boolean value) {
      if (!value) {
        this.oups = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case OUPS:
        if (value == null) {
          unsetOups();
        } else {
          setOups((InvalidRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OUPS:
        return getOups();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OUPS:
        return isSetOups();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePattern_result)
        return this.equals((deletePattern_result)that);
      return false;
    }

    public boolean equals(deletePattern_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oups = true && this.isSetOups();
      boolean that_present_oups = true && that.isSetOups();
      if (this_present_oups || that_present_oups) {
        if (!(this_present_oups && that_present_oups))
          return false;
        if (!this.oups.equals(that.oups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOups()) ? 131071 : 524287);
      if (isSetOups())
        hashCode = hashCode * 8191 + oups.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deletePattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOups()).compareTo(other.isSetOups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oups, other.oups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deletePattern_result(");
      boolean first = true;

      sb.append("oups:");
      if (this.oups == null) {
        sb.append("null");
      } else {
        sb.append(this.oups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePattern_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePattern_resultStandardScheme getScheme() {
        return new deletePattern_resultStandardScheme();
      }
    }

    private static class deletePattern_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deletePattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oups = new InvalidRequest();
                struct.oups.read(iprot);
                struct.setOupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oups != null) {
          oprot.writeFieldBegin(OUPS_FIELD_DESC);
          struct.oups.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePattern_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deletePattern_resultTupleScheme getScheme() {
        return new deletePattern_resultTupleScheme();
      }
    }

    private static class deletePattern_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deletePattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOups()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOups()) {
          struct.oups.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oups = new InvalidRequest();
          struct.oups.read(iprot);
          struct.setOupsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPattern_args implements org.apache.thrift.TBase<findPattern_args, findPattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPattern_args");

    private static final org.apache.thrift.protocol.TField PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("pattern", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPattern_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPattern_argsTupleSchemeFactory();

    public PatternModel pattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATTERN((short)1, "pattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATTERN
            return PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATTERN, new org.apache.thrift.meta_data.FieldMetaData("pattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPattern_args.class, metaDataMap);
    }

    public findPattern_args() {
    }

    public findPattern_args(
      PatternModel pattern)
    {
      this();
      this.pattern = pattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPattern_args(findPattern_args other) {
      if (other.isSetPattern()) {
        this.pattern = new PatternModel(other.pattern);
      }
    }

    public findPattern_args deepCopy() {
      return new findPattern_args(this);
    }

    @Override
    public void clear() {
      this.pattern = null;
    }

    public PatternModel getPattern() {
      return this.pattern;
    }

    public findPattern_args setPattern(PatternModel pattern) {
      this.pattern = pattern;
      return this;
    }

    public void unsetPattern() {
      this.pattern = null;
    }

    /** Returns true if field pattern is set (has been assigned a value) and false otherwise */
    public boolean isSetPattern() {
      return this.pattern != null;
    }

    public void setPatternIsSet(boolean value) {
      if (!value) {
        this.pattern = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PATTERN:
        if (value == null) {
          unsetPattern();
        } else {
          setPattern((PatternModel)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PATTERN:
        return getPattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PATTERN:
        return isSetPattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPattern_args)
        return this.equals((findPattern_args)that);
      return false;
    }

    public boolean equals(findPattern_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pattern = true && this.isSetPattern();
      boolean that_present_pattern = true && that.isSetPattern();
      if (this_present_pattern || that_present_pattern) {
        if (!(this_present_pattern && that_present_pattern))
          return false;
        if (!this.pattern.equals(that.pattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPattern()) ? 131071 : 524287);
      if (isSetPattern())
        hashCode = hashCode * 8191 + pattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPattern()).compareTo(other.isSetPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pattern, other.pattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPattern_args(");
      boolean first = true;

      sb.append("pattern:");
      if (this.pattern == null) {
        sb.append("null");
      } else {
        sb.append(this.pattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pattern != null) {
        pattern.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPattern_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPattern_argsStandardScheme getScheme() {
        return new findPattern_argsStandardScheme();
      }
    }

    private static class findPattern_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pattern = new PatternModel();
                struct.pattern.read(iprot);
                struct.setPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pattern != null) {
          oprot.writeFieldBegin(PATTERN_FIELD_DESC);
          struct.pattern.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPattern_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPattern_argsTupleScheme getScheme() {
        return new findPattern_argsTupleScheme();
      }
    }

    private static class findPattern_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPattern()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPattern()) {
          struct.pattern.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pattern = new PatternModel();
          struct.pattern.read(iprot);
          struct.setPatternIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPattern_result implements org.apache.thrift.TBase<findPattern_result, findPattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPattern_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("oups", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPattern_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPattern_resultTupleSchemeFactory();

    public java.util.List<PatternModel> success; // required
    public InvalidRequest oups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUPS((short)1, "oups");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUPS
            return OUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class))));
      tmpMap.put(_Fields.OUPS, new org.apache.thrift.meta_data.FieldMetaData("oups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPattern_result.class, metaDataMap);
    }

    public findPattern_result() {
    }

    public findPattern_result(
      java.util.List<PatternModel> success,
      InvalidRequest oups)
    {
      this();
      this.success = success;
      this.oups = oups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPattern_result(findPattern_result other) {
      if (other.isSetSuccess()) {
        java.util.List<PatternModel> __this__success = new java.util.ArrayList<PatternModel>(other.success.size());
        for (PatternModel other_element : other.success) {
          __this__success.add(new PatternModel(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOups()) {
        this.oups = new InvalidRequest(other.oups);
      }
    }

    public findPattern_result deepCopy() {
      return new findPattern_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oups = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PatternModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PatternModel elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<PatternModel>();
      }
      this.success.add(elem);
    }

    public java.util.List<PatternModel> getSuccess() {
      return this.success;
    }

    public findPattern_result setSuccess(java.util.List<PatternModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequest getOups() {
      return this.oups;
    }

    public findPattern_result setOups(InvalidRequest oups) {
      this.oups = oups;
      return this;
    }

    public void unsetOups() {
      this.oups = null;
    }

    /** Returns true if field oups is set (has been assigned a value) and false otherwise */
    public boolean isSetOups() {
      return this.oups != null;
    }

    public void setOupsIsSet(boolean value) {
      if (!value) {
        this.oups = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<PatternModel>)value);
        }
        break;

      case OUPS:
        if (value == null) {
          unsetOups();
        } else {
          setOups((InvalidRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUPS:
        return getOups();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUPS:
        return isSetOups();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPattern_result)
        return this.equals((findPattern_result)that);
      return false;
    }

    public boolean equals(findPattern_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oups = true && this.isSetOups();
      boolean that_present_oups = true && that.isSetOups();
      if (this_present_oups || that_present_oups) {
        if (!(this_present_oups && that_present_oups))
          return false;
        if (!this.oups.equals(that.oups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOups()) ? 131071 : 524287);
      if (isSetOups())
        hashCode = hashCode * 8191 + oups.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOups()).compareTo(other.isSetOups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oups, other.oups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPattern_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oups:");
      if (this.oups == null) {
        sb.append("null");
      } else {
        sb.append(this.oups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPattern_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPattern_resultStandardScheme getScheme() {
        return new findPattern_resultStandardScheme();
      }
    }

    private static class findPattern_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<PatternModel>(_list0.size);
                  PatternModel _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new PatternModel();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oups = new InvalidRequest();
                struct.oups.read(iprot);
                struct.setOupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PatternModel _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oups != null) {
          oprot.writeFieldBegin(OUPS_FIELD_DESC);
          struct.oups.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPattern_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPattern_resultTupleScheme getScheme() {
        return new findPattern_resultTupleScheme();
      }
    }

    private static class findPattern_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOups()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PatternModel _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetOups()) {
          struct.oups.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<PatternModel>(_list5.size);
            PatternModel _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new PatternModel();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oups = new InvalidRequest();
          struct.oups.read(iprot);
          struct.setOupsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPatternById_args implements org.apache.thrift.TBase<findPatternById_args, findPatternById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPatternById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatternById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPatternById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPatternById_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatternById_args.class, metaDataMap);
    }

    public findPatternById_args() {
    }

    public findPatternById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatternById_args(findPatternById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public findPatternById_args deepCopy() {
      return new findPatternById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public findPatternById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatternById_args)
        return this.equals((findPatternById_args)that);
      return false;
    }

    public boolean equals(findPatternById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(findPatternById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPatternById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatternById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPatternById_argsStandardScheme getScheme() {
        return new findPatternById_argsStandardScheme();
      }
    }

    private static class findPatternById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPatternById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatternById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatternById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatternById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPatternById_argsTupleScheme getScheme() {
        return new findPatternById_argsTupleScheme();
      }
    }

    private static class findPatternById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPatternById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatternById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatternById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findPatternById_result implements org.apache.thrift.TBase<findPatternById_result, findPatternById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPatternById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatternById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("oups", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPatternById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPatternById_resultTupleSchemeFactory();

    public PatternModel success; // required
    public InvalidRequest oups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUPS((short)1, "oups");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUPS
            return OUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      tmpMap.put(_Fields.OUPS, new org.apache.thrift.meta_data.FieldMetaData("oups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatternById_result.class, metaDataMap);
    }

    public findPatternById_result() {
    }

    public findPatternById_result(
      PatternModel success,
      InvalidRequest oups)
    {
      this();
      this.success = success;
      this.oups = oups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatternById_result(findPatternById_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatternModel(other.success);
      }
      if (other.isSetOups()) {
        this.oups = new InvalidRequest(other.oups);
      }
    }

    public findPatternById_result deepCopy() {
      return new findPatternById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oups = null;
    }

    public PatternModel getSuccess() {
      return this.success;
    }

    public findPatternById_result setSuccess(PatternModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequest getOups() {
      return this.oups;
    }

    public findPatternById_result setOups(InvalidRequest oups) {
      this.oups = oups;
      return this;
    }

    public void unsetOups() {
      this.oups = null;
    }

    /** Returns true if field oups is set (has been assigned a value) and false otherwise */
    public boolean isSetOups() {
      return this.oups != null;
    }

    public void setOupsIsSet(boolean value) {
      if (!value) {
        this.oups = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatternModel)value);
        }
        break;

      case OUPS:
        if (value == null) {
          unsetOups();
        } else {
          setOups((InvalidRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUPS:
        return getOups();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUPS:
        return isSetOups();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatternById_result)
        return this.equals((findPatternById_result)that);
      return false;
    }

    public boolean equals(findPatternById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oups = true && this.isSetOups();
      boolean that_present_oups = true && that.isSetOups();
      if (this_present_oups || that_present_oups) {
        if (!(this_present_oups && that_present_oups))
          return false;
        if (!this.oups.equals(that.oups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOups()) ? 131071 : 524287);
      if (isSetOups())
        hashCode = hashCode * 8191 + oups.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findPatternById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOups()).compareTo(other.isSetOups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oups, other.oups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findPatternById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oups:");
      if (this.oups == null) {
        sb.append("null");
      } else {
        sb.append(this.oups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatternById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPatternById_resultStandardScheme getScheme() {
        return new findPatternById_resultStandardScheme();
      }
    }

    private static class findPatternById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findPatternById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatternById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatternModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oups = new InvalidRequest();
                struct.oups.read(iprot);
                struct.setOupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatternById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oups != null) {
          oprot.writeFieldBegin(OUPS_FIELD_DESC);
          struct.oups.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatternById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findPatternById_resultTupleScheme getScheme() {
        return new findPatternById_resultTupleScheme();
      }
    }

    private static class findPatternById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPatternById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatternById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOups()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOups()) {
          struct.oups.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatternById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PatternModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oups = new InvalidRequest();
          struct.oups.read(iprot);
          struct.setOupsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLastPattern_args implements org.apache.thrift.TBase<getLastPattern_args, getLastPattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastPattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastPattern_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLastPattern_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLastPattern_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastPattern_args.class, metaDataMap);
    }

    public getLastPattern_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastPattern_args(getLastPattern_args other) {
    }

    public getLastPattern_args deepCopy() {
      return new getLastPattern_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastPattern_args)
        return this.equals((getLastPattern_args)that);
      return false;
    }

    public boolean equals(getLastPattern_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getLastPattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLastPattern_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastPattern_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastPattern_argsStandardScheme getScheme() {
        return new getLastPattern_argsStandardScheme();
      }
    }

    private static class getLastPattern_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLastPattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastPattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastPattern_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastPattern_argsTupleScheme getScheme() {
        return new getLastPattern_argsTupleScheme();
      }
    }

    private static class getLastPattern_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLastPattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastPattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getLastPattern_result implements org.apache.thrift.TBase<getLastPattern_result, getLastPattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastPattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastPattern_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField OUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("oups", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLastPattern_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLastPattern_resultTupleSchemeFactory();

    public PatternModel success; // required
    public InvalidRequest oups; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUPS((short)1, "oups");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUPS
            return OUPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PatternModel.class)));
      tmpMap.put(_Fields.OUPS, new org.apache.thrift.meta_data.FieldMetaData("oups", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastPattern_result.class, metaDataMap);
    }

    public getLastPattern_result() {
    }

    public getLastPattern_result(
      PatternModel success,
      InvalidRequest oups)
    {
      this();
      this.success = success;
      this.oups = oups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastPattern_result(getLastPattern_result other) {
      if (other.isSetSuccess()) {
        this.success = new PatternModel(other.success);
      }
      if (other.isSetOups()) {
        this.oups = new InvalidRequest(other.oups);
      }
    }

    public getLastPattern_result deepCopy() {
      return new getLastPattern_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oups = null;
    }

    public PatternModel getSuccess() {
      return this.success;
    }

    public getLastPattern_result setSuccess(PatternModel success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidRequest getOups() {
      return this.oups;
    }

    public getLastPattern_result setOups(InvalidRequest oups) {
      this.oups = oups;
      return this;
    }

    public void unsetOups() {
      this.oups = null;
    }

    /** Returns true if field oups is set (has been assigned a value) and false otherwise */
    public boolean isSetOups() {
      return this.oups != null;
    }

    public void setOupsIsSet(boolean value) {
      if (!value) {
        this.oups = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PatternModel)value);
        }
        break;

      case OUPS:
        if (value == null) {
          unsetOups();
        } else {
          setOups((InvalidRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUPS:
        return getOups();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUPS:
        return isSetOups();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastPattern_result)
        return this.equals((getLastPattern_result)that);
      return false;
    }

    public boolean equals(getLastPattern_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oups = true && this.isSetOups();
      boolean that_present_oups = true && that.isSetOups();
      if (this_present_oups || that_present_oups) {
        if (!(this_present_oups && that_present_oups))
          return false;
        if (!this.oups.equals(that.oups))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOups()) ? 131071 : 524287);
      if (isSetOups())
        hashCode = hashCode * 8191 + oups.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getLastPattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOups()).compareTo(other.isSetOups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOups()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oups, other.oups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getLastPattern_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oups:");
      if (this.oups == null) {
        sb.append("null");
      } else {
        sb.append(this.oups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastPattern_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastPattern_resultStandardScheme getScheme() {
        return new getLastPattern_resultStandardScheme();
      }
    }

    private static class getLastPattern_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getLastPattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PatternModel();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oups = new InvalidRequest();
                struct.oups.read(iprot);
                struct.setOupsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastPattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.oups != null) {
          oprot.writeFieldBegin(OUPS_FIELD_DESC);
          struct.oups.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastPattern_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getLastPattern_resultTupleScheme getScheme() {
        return new getLastPattern_resultTupleScheme();
      }
    }

    private static class getLastPattern_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLastPattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOups()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetOups()) {
          struct.oups.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastPattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PatternModel();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oups = new InvalidRequest();
          struct.oups.read(iprot);
          struct.setOupsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
